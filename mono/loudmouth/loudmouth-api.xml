<?xml version="1.0"?>
<api><!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace library="loudmouth" name="Loudmouth">
    <enum name="CertificateStatus" cname="LmCertificateStatus" type="enum">
      <member cname="LM_CERT_INVALID" name="Invalid" />
      <member cname="LM_CERT_ISSUER_NOT_FOUND" name="IssuerNotFound" />
      <member cname="LM_CERT_REVOKED" name="Revoked" />
    </enum>
    <enum name="ConnectionState" cname="LmConnectionState" type="enum">
      <member cname="LM_CONNECTION_STATE_DISCONNECTED" name="Disconnected" />
      <member cname="LM_CONNECTION_STATE_CONNECTING" name="Connecting" />
      <member cname="LM_CONNECTION_STATE_CONNECTED" name="Connected" />
      <member cname="LM_CONNECTION_STATE_AUTHENTICATING" name="Authenticating" />
      <member cname="LM_CONNECTION_STATE_AUTHENTICATED" name="Authenticated" />
    </enum>
    <enum name="DisconnectReason" cname="LmDisconnectReason" type="enum">
      <member cname="LM_DISCONNECT_REASON_OK" name="Ok" />
      <member cname="LM_DISCONNECT_REASON_PING_TIME_OUT" name="PingTimeOut" />
      <member cname="LM_DISCONNECT_REASON_HUP" name="Hup" />
      <member cname="LM_DISCONNECT_REASON_ERROR" name="Error" />
      <member cname="LM_DISCONNECT_REASON_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="Error" cname="LmError" type="enum">
      <member cname="LM_ERROR_CONNECTION_NOT_OPEN" name="ConnectionNotOpen" />
      <member cname="LM_ERROR_CONNECTION_OPEN" name="ConnectionOpen" />
      <member cname="LM_ERROR_AUTH_FAILED" name="AuthFailed" />
      <member cname="LM_ERROR_CONNECTION_FAILED" name="ConnectionFailed" />
    </enum>
    <enum name="HandlerPriority" cname="LmHandlerPriority" type="enum">
      <member cname="LM_HANDLER_PRIORITY_LAST" name="Last" value="1" />
      <member cname="LM_HANDLER_PRIORITY_NORMAL" name="Normal" value="2" />
      <member cname="LM_HANDLER_PRIORITY_FIRST" name="First" value="3" />
    </enum>
    <enum name="HandlerResult" cname="LmHandlerResult" type="enum">
      <member cname="LM_HANDLER_RESULT_REMOVE_MESSAGE" name="RemoveMessage" />
      <member cname="LM_HANDLER_RESULT_ALLOW_MORE_HANDLERS" name="AllowMoreHandlers" />
    </enum>
    <enum name="MessageSubType" cname="LmMessageSubType" type="enum">
      <member cname="LM_MESSAGE_SUB_TYPE_NOT_SET" name="NotSet" value="-10" />
      <member cname="LM_MESSAGE_SUB_TYPE_AVAILABLE" name="Available" value="-1" />
      <member cname="LM_MESSAGE_SUB_TYPE_NORMAL" name="Normal" />
      <member cname="LM_MESSAGE_SUB_TYPE_CHAT" name="Chat" />
      <member cname="LM_MESSAGE_SUB_TYPE_GROUPCHAT" name="Groupchat" />
      <member cname="LM_MESSAGE_SUB_TYPE_HEADLINE" name="Headline" />
      <member cname="LM_MESSAGE_SUB_TYPE_UNAVAILABLE" name="Unavailable" />
      <member cname="LM_MESSAGE_SUB_TYPE_PROBE" name="Probe" />
      <member cname="LM_MESSAGE_SUB_TYPE_SUBSCRIBE" name="Subscribe" />
      <member cname="LM_MESSAGE_SUB_TYPE_UNSUBSCRIBE" name="Unsubscribe" />
      <member cname="LM_MESSAGE_SUB_TYPE_SUBSCRIBED" name="Subscribed" />
      <member cname="LM_MESSAGE_SUB_TYPE_UNSUBSCRIBED" name="Unsubscribed" />
      <member cname="LM_MESSAGE_SUB_TYPE_GET" name="Get" />
      <member cname="LM_MESSAGE_SUB_TYPE_SET" name="Set" />
      <member cname="LM_MESSAGE_SUB_TYPE_RESULT" name="Result" />
      <member cname="LM_MESSAGE_SUB_TYPE_ERROR" name="Error" />
    </enum>
    <enum name="MessageType" cname="LmMessageType" type="enum">
      <member cname="LM_MESSAGE_TYPE_MESSAGE" name="Message" />
      <member cname="LM_MESSAGE_TYPE_PRESENCE" name="Presence" />
      <member cname="LM_MESSAGE_TYPE_IQ" name="Iq" />
      <member cname="LM_MESSAGE_TYPE_STREAM" name="Stream" />
      <member cname="LM_MESSAGE_TYPE_STREAM_ERROR" name="StreamError" />
      <member cname="LM_MESSAGE_TYPE_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="ProxyType" cname="LmProxyType" type="enum">
      <member cname="LM_PROXY_TYPE_NONE" name="None" />
      <member cname="LM_PROXY_TYPE_HTTP" name="Http" />
    </enum>
    <enum name="SSLResponse" cname="LmSSLResponse" type="enum">
      <member cname="LM_SSL_RESPONSE_CONTINUE" name="Continue" />
      <member cname="LM_SSL_RESPONSE_STOP" name="Stop" />
    </enum>
    <enum name="SSLStatus" cname="LmSSLStatus" type="enum">
      <member cname="LM_SSL_STATUS_NO_CERT_FOUND" name="NoCertFound" />
      <member cname="LM_SSL_STATUS_UNTRUSTED_CERT" name="UntrustedCert" />
      <member cname="LM_SSL_STATUS_CERT_EXPIRED" name="CertExpired" />
      <member cname="LM_SSL_STATUS_CERT_NOT_ACTIVATED" name="CertNotActivated" />
      <member cname="LM_SSL_STATUS_CERT_HOSTNAME_MISMATCH" name="CertHostnameMismatch" />
      <member cname="LM_SSL_STATUS_CERT_FINGERPRINT_MISMATCH" name="CertFingerprintMismatch" />
      <member cname="LM_SSL_STATUS_GENERIC_ERROR" name="GenericError" />
    </enum>
    <callback name="DisconnectFunction" cname="LmDisconnectFunction">
      <return-type type="void" />
      <parameters>
        <parameter type="LmConnection*" name="connection" />
        <parameter type="LmDisconnectReason" name="reason" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="HandleMessageFunction" cname="LmHandleMessageFunction">
      <return-type type="LmHandlerResult" />
      <parameters>
        <parameter type="LmMessageHandler*" name="handler" />
        <parameter type="LmConnection*" name="connection" />
        <parameter type="LmMessage*" name="message" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="ResultFunction" cname="LmResultFunction">
      <return-type type="void" />
      <parameters>
        <parameter type="LmConnection*" name="connection" />
        <parameter type="gboolean" name="success" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="SSLFunction" cname="LmSSLFunction">
      <return-type type="LmSSLResponse" />
      <parameters>
        <parameter type="LmSSL*" name="ssl" />
        <parameter type="LmSSLStatus" name="status" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <struct name="Connection" cname="LmConnection" opaque="true">
      <method name="Authenticate" cname="lm_connection_authenticate">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="username" />
          <parameter type="const-gchar*" name="password" />
          <parameter type="const-gchar*" name="resource" />
          <parameter type="LmResultFunction" name="function" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AuthenticateAndBlock" cname="lm_connection_authenticate_and_block">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="username" />
          <parameter type="const-gchar*" name="password" />
          <parameter type="const-gchar*" name="resource" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CancelOpen" cname="lm_connection_cancel_open">
        <return-type type="void" />
      </method>
      <method name="Close" cname="lm_connection_close">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetPort" cname="lm_connection_get_port">
        <return-type type="guint" />
      </method>
      <method name="GetProxy" cname="lm_connection_get_proxy">
        <return-type type="LmProxy*" />
      </method>
      <method name="GetServer" cname="lm_connection_get_server">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetSsl" cname="lm_connection_get_ssl">
        <return-type type="LmSSL*" />
      </method>
      <method name="GetState" cname="lm_connection_get_state">
        <return-type type="LmConnectionState" />
      </method>
      <method name="IsAuthenticated" cname="lm_connection_is_authenticated">
        <return-type type="gboolean" />
      </method>
      <method name="IsOpen" cname="lm_connection_is_open">
        <return-type type="gboolean" />
      </method>
      <constructor cname="lm_connection_new">
        <parameters>
          <parameter type="const-gchar*" name="server" />
        </parameters>
      </constructor>
      <method name="Open" cname="lm_connection_open">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="LmResultFunction" name="function" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="OpenAndBlock" cname="lm_connection_open_and_block">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Ref" cname="lm_connection_ref">
        <return-type type="LmConnection*" />
      </method>
      <method name="RegisterMessageHandler" cname="lm_connection_register_message_handler">
        <return-type type="void" />
        <parameters>
          <parameter type="LmMessageHandler*" name="handler" />
          <parameter type="LmMessageType" name="type" />
          <parameter type="LmHandlerPriority" name="priority" />
        </parameters>
      </method>
      <method name="Send" cname="lm_connection_send">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="LmMessage*" name="message" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendRaw" cname="lm_connection_send_raw">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="str" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendWithReply" cname="lm_connection_send_with_reply">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="LmMessage*" name="message" />
          <parameter type="LmMessageHandler*" name="handler" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendWithReplyAndBlock" cname="lm_connection_send_with_reply_and_block">
        <return-type type="LmMessage*" />
        <parameters>
          <parameter type="LmMessage*" name="message" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetDisconnectFunction" cname="lm_connection_set_disconnect_function">
        <return-type type="void" />
        <parameters>
          <parameter type="LmDisconnectFunction" name="function" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
        </parameters>
      </method>
      <method name="SetPort" cname="lm_connection_set_port">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="port" />
        </parameters>
      </method>
      <method name="SetProxy" cname="lm_connection_set_proxy">
        <return-type type="void" />
        <parameters>
          <parameter type="LmProxy*" name="proxy" />
        </parameters>
      </method>
      <method name="SetServer" cname="lm_connection_set_server">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="server" />
        </parameters>
      </method>
      <method name="SetSsl" cname="lm_connection_set_ssl">
        <return-type type="void" />
        <parameters>
          <parameter type="LmSSL*" name="ssl" />
        </parameters>
      </method>
      <method name="Unref" cname="lm_connection_unref">
        <return-type type="void" />
      </method>
      <method name="UnregisterMessageHandler" cname="lm_connection_unregister_message_handler">
        <return-type type="void" />
        <parameters>
          <parameter type="LmMessageHandler*" name="handler" />
          <parameter type="LmMessageType" name="type" />
        </parameters>
      </method>
    </struct>
    <struct name="Message" cname="LmMessage">
      <field cname="node" type="LmMessageNode*" />
      <field cname="priv" type="LmMessagePriv*" />
      <method name="GetNode" cname="lm_message_get_node">
        <return-type type="LmMessageNode*" />
      </method>
      <method name="GetSubType" cname="lm_message_get_sub_type">
        <return-type type="LmMessageSubType" />
      </method>
      <method name="GetType" cname="lm_message_get_type">
        <return-type type="LmMessageType" />
      </method>
      <constructor cname="lm_message_new">
        <parameters>
          <parameter type="const-gchar*" name="to" />
          <parameter type="LmMessageType" name="type" />
        </parameters>
      </constructor>
      <constructor cname="lm_message_new_with_sub_type">
        <parameters>
          <parameter type="const-gchar*" name="to" />
          <parameter type="LmMessageType" name="type" />
          <parameter type="LmMessageSubType" name="sub_type" />
        </parameters>
      </constructor>
      <method name="Ref" cname="lm_message_ref">
        <return-type type="LmMessage*" />
      </method>
      <method name="Unref" cname="lm_message_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="MessageHandler" cname="LmMessageHandler" opaque="true">
      <method name="Invalidate" cname="lm_message_handler_invalidate">
        <return-type type="void" />
      </method>
      <method name="IsValid" cname="lm_message_handler_is_valid">
        <return-type type="gboolean" />
      </method>
      <constructor cname="lm_message_handler_new">
        <parameters>
          <parameter type="LmHandleMessageFunction" name="function" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
        </parameters>
      </constructor>
      <method name="Ref" cname="lm_message_handler_ref">
        <return-type type="LmMessageHandler*" />
      </method>
      <method name="Unref" cname="lm_message_handler_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="MessageNode" cname="LmMessageNode">
      <field cname="name" type="gchar*" />
      <field cname="value" type="gchar*" />
      <field cname="raw_mode" type="gboolean" />
      <field cname="next" type="LmMessageNode*" />
      <field cname="prev" type="LmMessageNode*" />
      <field cname="parent" type="LmMessageNode*" />
      <field cname="children" type="LmMessageNode*" />
      <field cname="attributes" type="GSList*" />
      <field cname="ref_count" type="gint" />
      <method name="AddChild" cname="lm_message_node_add_child">
        <return-type type="LmMessageNode*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="FindChild" cname="lm_message_node_find_child">
        <return-type type="LmMessageNode*" />
        <parameters>
          <parameter type="const-gchar*" name="child_name" />
        </parameters>
      </method>
      <method name="GetAttribute" cname="lm_message_node_get_attribute">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="GetChild" cname="lm_message_node_get_child">
        <return-type type="LmMessageNode*" />
        <parameters>
          <parameter type="const-gchar*" name="child_name" />
        </parameters>
      </method>
      <method name="GetRawMode" cname="lm_message_node_get_raw_mode">
        <return-type type="gboolean" />
      </method>
      <method name="GetValue" cname="lm_message_node_get_value">
        <return-type type="const-gchar*" />
      </method>
      <method name="Ref" cname="lm_message_node_ref">
        <return-type type="LmMessageNode*" />
      </method>
      <method name="SetAttribute" cname="lm_message_node_set_attribute">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetAttributes" cname="lm_message_node_set_attributes">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter ellipsis="true" />
        </parameters>
      </method>
      <method name="SetRawMode" cname="lm_message_node_set_raw_mode">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="raw_mode" />
        </parameters>
      </method>
      <method name="SetValue" cname="lm_message_node_set_value">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="ToString" cname="lm_message_node_to_string">
        <return-type type="gchar*" />
      </method>
      <method name="Unref" cname="lm_message_node_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="MessagePriv" cname="LmMessagePriv" opaque="true" hidden="1" />
    <struct name="Proxy" cname="LmProxy" opaque="true">
      <method name="GetPassword" cname="lm_proxy_get_password">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetPort" cname="lm_proxy_get_port">
        <return-type type="guint" />
      </method>
      <method name="GetServer" cname="lm_proxy_get_server">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="lm_proxy_get_type">
        <return-type type="LmProxyType" />
      </method>
      <method name="GetUsername" cname="lm_proxy_get_username">
        <return-type type="const-gchar*" />
      </method>
      <constructor cname="lm_proxy_new">
        <parameters>
          <parameter type="LmProxyType" name="type" />
        </parameters>
      </constructor>
      <method name="Ref" cname="lm_proxy_ref">
        <return-type type="LmProxy*" />
      </method>
      <method name="SetPassword" cname="lm_proxy_set_password">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="password" />
        </parameters>
      </method>
      <method name="SetPort" cname="lm_proxy_set_port">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="port" />
        </parameters>
      </method>
      <method name="SetServer" cname="lm_proxy_set_server">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="server" />
        </parameters>
      </method>
      <method name="SetType" cname="lm_proxy_set_type">
        <return-type type="void" />
        <parameters>
          <parameter type="LmProxyType" name="type" />
        </parameters>
      </method>
      <method name="SetUsername" cname="lm_proxy_set_username">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="username" />
        </parameters>
      </method>
      <method name="Unref" cname="lm_proxy_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="SSL" cname="LmSSL" opaque="true">
      <method name="IsSupported" cname="lm_ssl_is_supported" shared="true">
        <return-type type="gboolean" />
      </method>
      <constructor cname="lm_ssl_new">
        <parameters>
          <parameter type="const-gchar*" name="expected_fingerprint" />
          <parameter type="LmSSLFunction" name="ssl_function" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
        </parameters>
      </constructor>
      <method name="Ref" cname="lm_ssl_ref">
        <return-type type="LmSSL*" />
      </method>
      <method name="Unref" cname="lm_ssl_unref">
        <return-type type="void" />
      </method>
    </struct>
    <class name="Global" cname="LmGlobal">
      <method name="ErrorQuark" cname="lm_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
    </class>
  </namespace>
</api>